// Prisma schema: Authentication + Watchlist + Favorites only

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

model User {
  id             String   @id @default(cuid())
  email          String   @unique
  username       String?  @unique
  hashedPassword String
  firstName      String?
  lastName       String?
  avatar_path    String?
  bio            String?
  is_verified    Boolean  @default(false)
  is_active      Boolean  @default(true)
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt

  // Relations
  sessions       Session[]
  favorites      FavoriteItem[]
  watchlists     Watchlist[]
  watchlistItems WatchlistItem[]

  @@index([email])
  @@index([username])
  @@index([is_active])
}

model Session {
  id         String   @id @default(cuid())
  userId     String
  created_at DateTime @default(now())
  expires_at DateTime
  user_agent String?
  ip_address String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expires_at])
}

model Watchlist {
  id          String   @id @default(cuid())
  userId      String
  name        String
  description String?
  is_public   Boolean  @default(false)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  user  User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  items WatchlistItem[]

  @@index([userId])
  @@index([is_public])
  @@index([name])
}

model WatchlistItem {
  id          String    @id @default(cuid())
  userId      String
  watchlistId String?
  movieId     Int?
  showId      Int?
  added_at    DateTime  @default(now())
  watched_at  DateTime?
  is_watched  Boolean   @default(false)
  notes       String?

  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  watchlist Watchlist? @relation(fields: [watchlistId], references: [id], onDelete: Cascade)

  @@unique([userId, movieId])
  @@unique([userId, showId])
  @@index([userId])
  @@index([watchlistId])
  @@index([movieId])
  @@index([showId])
  @@index([is_watched])
  @@index([added_at])
}

model FavoriteItem {
  id         String   @id @default(cuid())
  userId     String
  movieId    Int?
  showId     Int?
  created_at DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, movieId])
  @@unique([userId, showId])
  @@index([userId])
  @@index([movieId])
  @@index([showId])
  @@index([created_at])
}
